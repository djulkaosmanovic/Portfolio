%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2400 1050
%%HiResBoundingBox: 0 0 2400 1050
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2400 1050 re
W
q
[0.24 0 0 -0.24 0 1050] cm
q
0 0 10000 4375 re
W*
q
[3.125 0 0 3.125 0 0] cm
/DeviceRGB {} CS
[0.549 0.3294 0.6314] SC
/DeviceRGB {} cs
[0.549 0.3294 0.6314] sc
0 0 3200 1400 re
f
Q
q
[31.25 0 0 31.25 312.5 312.5] cm
/DeviceRGB {} CS
[0.9804 0.9843 0.8314] SC
/DeviceRGB {} cs
[0.9804 0.9843 0.8314] sc
0 0 m
300 0 l
300 120 l
0 120 l
0 0 l
h
2 2 m
298 2 l
298 118 l
2 118 l
2 2 l
h
6 6 m
294 6 l
294 114 l
6 114 l
6 6 l
h
8 8 m
292 8 l
292 112 l
6 112 l
8 112 l
8 8 l
h
f*
Q
q
[20.134178 0 0 20.134178 1855.0718 1675.54089] cm
/DeviceRGB {} CS
[0.9804 0.9843 0.8314] SC
/DeviceRGB {} cs
[0.9804 0.9843 0.8314] sc
15.08 11.92 m
24.76 11.92 30 17.68 30 25.4 c
30 33.079998 24.76 40.080002 15.04 40.080002 c
13.12 40.080002 10.639999 39.84 7.68 39.84 c
5.2 39.84 3.24 39.880001 1.4 40.080002 c
1 40.120003 0.84 38.720001 1.16 38.640003 c
3.48 38.040005 5.28 37.680004 5.28 34.720001 c
5.28 27.000002 l
2.32 27.000002 l
1.64 27.000002 1.64 24.960003 2.32 24.960003 c
5.28 24.960003 l
5.28 16.960003 l
5.28 14.400003 3.64 13.720003 1.92 13.280003 c
1.6 13.200003 1.8 11.880003 2.12 11.920003 c
3.76 12.120003 5.44 12.160003 7.12 12.160003 c
10.24 12.160003 13.04 11.920003 15.08 11.920003 c
15.08 11.92 l
h
15.44 37.959999 m
21.959999 37.959999 25.200001 34.439999 25.200001 27.68 c
25.200001 20.040001 21.040001 14.04 13.840001 14.04 c
11.000001 14.04 10.080001 14.92 10.080001 16.959999 c
10.080001 24.959999 l
13.160001 24.959999 l
13.840001 24.959999 13.840001 27 13.160001 27 c
10.080001 27 l
10.080001 34.720001 l
10.080001 36.880001 11.560001 37.960003 15.440001 37.960003 c
15.44 37.959999 l
h
39.085999 40.639999 m
35.326 40.639999 34.245998 37.759998 34.245998 35.239998 c
34.245998 26.399998 l
34.245998 24.399998 32.685997 23.839998 31.525999 23.679998 c
31.245998 23.639997 31.365999 22.639999 31.685999 22.559998 c
38.045998 20.679998 l
38.525997 20.519999 38.885998 20.919998 38.765999 21.399998 c
38.365997 22.999998 38.525997 24.679998 38.525997 25.879997 c
38.525997 33.919998 l
38.525997 36.399998 39.325996 37.559998 41.445999 37.559998 c
43.445999 37.559998 46.966 37.039997 46.966 34.679996 c
46.966 26.399998 l
46.966 24.399998 45.405998 23.839998 44.245998 23.679998 c
43.966 23.639997 44.085999 22.639999 44.405998 22.559998 c
50.765999 20.679998 l
51.245998 20.519999 51.605999 20.919998 51.486 21.399998 c
51.085999 22.999998 51.245998 24.759998 51.245998 25.959997 c
51.245998 35.639999 l
51.245998 39.040001 54.125999 37.639999 54.685997 38 c
54.885998 38.119999 54.965996 38.400002 54.965996 38.560001 c
54.965996 39.400002 51.485996 40.639999 49.805996 40.639999 c
48.525997 40.639999 47.605995 37.799999 46.085995 38.559998 c
44.485996 39.359997 41.645996 40.639999 39.085995 40.639999 c
39.085999 40.639999 l
h
55.372002 40 m
55.052002 40 54.772003 38.84 55.092003 38.799999 c
56.292004 38.639999 57.812004 38.079998 57.812004 35.759998 c
57.812004 18.159998 l
57.812004 13.759998 57.212006 12.919998 54.732002 12.639998 c
54.412003 12.599998 54.532001 11.559998 54.812004 11.519998 c
62.252003 9.919997 l
62.612003 9.839997 62.932003 10.119997 62.812004 10.639998 c
62.532005 11.919997 62.092003 14.479998 62.092003 19.759998 c
62.092003 35.759998 l
62.092003 38.079998 63.612003 38.639999 64.852005 38.799999 c
65.132004 38.84 64.892006 40 64.572006 40 c
55.372005 40 l
55.372002 40 l
h
65.977997 40 m
65.657997 40 65.377998 38.84 65.697998 38.799999 c
66.897995 38.639999 68.417999 38.079998 68.417999 35.759998 c
68.417999 18.159998 l
68.417999 13.759998 67.818001 12.919998 65.337997 12.639998 c
65.017998 12.599998 65.138 11.559998 65.417999 11.519998 c
72.858002 9.919997 l
73.218002 9.839997 73.538002 10.119997 73.417999 10.639998 c
73.138 11.919997 72.697998 14.479998 72.697998 19.759998 c
72.697998 35.759998 l
72.697998 38.079998 74.217995 38.639999 75.458 38.799999 c
75.737999 38.84 75.498001 40 75.178001 40 c
65.978004 40 l
65.977997 40 l
h
84.657997 40.68 m
82.257996 40.360001 76.458 33.799999 74.138 30.440001 c
73.778 29.92 73.697998 29.52 74.258003 29.08 c
77.618004 26.440001 80.178001 24.16 78.378006 22.68 c
77.738007 22.16 77.938004 21.4 78.618004 21.4 c
87.098007 21.4 l
87.858009 21.4 87.858009 22.719999 87.098007 22.84 c
84.21801 23.280001 81.298004 24.92 79.778008 26.440001 c
78.21801 28 77.818008 28.68 78.578011 29.68 c
80.858009 32.720001 85.578011 37.880001 88.258011 38.200001 c
88.578011 38.240002 88.938011 38.280003 88.938011 38.799999 c
88.938011 39.200001 88.498009 39.279999 87.978012 39.48 c
84.657997 40.68 l
h
95.384003 40.639999 m
92.624001 40.639999 89.903999 39 89.903999 35.759998 c
89.903999 33.599998 91.183998 32.439999 94.063995 31.519999 c
99.903992 29.639999 l
101.103989 29.24 101.463989 29.199999 101.463989 28.199999 c
101.463989 26.599998 l
101.463989 24.119999 100.223991 23.839998 98.663986 23.839998 c
96.543983 23.839998 94.023987 24.399998 92.543983 24.559998 c
92.183983 24.599998 91.943985 24.399998 91.903984 24.119997 c
91.823982 23.399998 l
91.703979 22.359997 97.783981 20.679998 100.823982 20.679998 c
105.463982 20.679998 105.783981 24.359999 105.783981 27.199999 c
105.783981 35.639999 l
105.783981 39 108.663979 37.639999 109.223984 38 c
109.423981 38.119999 109.503983 38.400002 109.503983 38.560001 c
109.503983 39.400002 106.103981 40.639999 104.423981 40.639999 c
103.143982 40.639999 102.343979 39.919998 101.38398 37.880001 c
97.583977 40.200001 96.74398 40.639999 95.38398 40.639999 c
95.384003 40.639999 l
h
97.304001 37.68 m
99.344002 37.68 101.503998 36.240002 101.503998 34.200001 c
101.503998 31.080002 l
101.264 31.240002 101.304001 31.280003 100.543999 31.520002 c
96.503998 32.880001 l
95.223999 33.32 94.584 34 94.584 35.200001 c
94.584 36.720001 95.624001 37.68 97.304001 37.68 c
h
130.876007 40.639999 m
122.556007 40.639999 116.436005 34.48 116.436005 26.16 c
116.436005 18.08 122.196007 11.36 130.956009 11.36 c
139.31601 11.36 145.396011 17.48 145.396011 25.799999 c
145.396011 33.919998 139.67601 40.639999 130.876007 40.639999 c
h
132.436005 37.919998 m
135.956009 37.919998 140.636002 35.599998 140.636002 28.039997 c
140.636002 19.959997 135.156006 14.079997 129.395996 14.079997 c
125.875999 14.079997 121.235992 16.399998 121.235992 23.919998 c
121.235992 32.079998 126.715996 37.919998 132.435989 37.919998 c
132.436005 37.919998 l
h
154.001999 40.639999 m
150.761993 40.639999 147.362 39.32 147.802002 38.119999 c
148.442001 36.439999 l
149.362 34 151.001999 38.199997 155.481995 38.199997 c
159.362 38.199997 159.881989 35.639996 156.802002 34.079998 c
151.561996 31.439999 l
145.442001 28.359999 147.481995 20.679998 155.321991 20.679998 c
158.281998 20.679998 161.321991 21.879999 160.841995 23.039999 c
160.162003 24.719999 l
159.201996 27.119999 157.682007 23.16 153.722 23.16 c
150.682007 23.16 150.121994 25.719999 152.921997 27.119999 c
158.362 29.879999 l
164.761993 33.119999 162.602005 40.639999 154.001999 40.639999 c
h
197.168 38.799999 m
197.48801 38.84 197.20799 40 196.92799 40 c
188.12799 40 l
187.84799 40 187.68799 38.84 187.88799 38.799999 c
189.28798 38.52 190.12799 37.880001 190.12799 35.759998 c
190.12799 28.079998 l
190.12799 24.719997 188.448 23.959999 186.28799 23.959999 c
184.808 23.959999 182.32799 24.48 182.32799 25.48 c
182.32799 35.759998 l
182.32799 38.079998 183.64799 38.68 184.72798 38.799999 c
185.04799 38.84 184.76797 40 184.48798 40 c
176.04797 40 l
175.76797 40 175.56798 38.84 175.80797 38.799999 c
177.20796 38.559998 178.04797 37.880001 178.04797 35.759998 c
178.04797 28.079998 l
178.04797 24.719997 176.52797 23.959999 174.24797 23.959999 c
172.72797 23.959999 170.24797 24.439999 170.24797 25.48 c
170.24797 35.759998 l
170.24797 37.879997 171.32797 38.599998 172.64796 38.799999 c
172.92796 38.84 172.72797 40 172.40796 40 c
163.487961 40 l
163.167953 40 162.887955 38.84 163.207962 38.799999 c
164.407959 38.639999 165.967957 38.079998 165.967957 35.759998 c
165.967957 26.159998 l
165.967957 24.239998 164.927963 23.799997 163.247955 23.599998 c
162.927948 23.559998 163.087952 22.519999 163.407959 22.439999 c
169.72797 20.679998 l
170.20796 20.559998 170.40796 20.879999 170.40796 21.279999 c
170.40796 22.4 170.72797 22.839998 171.36797 22.559999 c
173.00797 21.84 174.84796 20.68 177.08797 20.68 c
179.28796 20.68 180.72797 21.720001 181.52797 23.08 c
183.76797 21.799999 186.72797 20.68 189.08797 20.68 c
192.96797 20.68 194.40797 23.68 194.40797 26.280001 c
194.40797 35.760002 l
194.40797 38.080002 195.96797 38.640003 197.16797 38.800003 c
197.168 38.799999 l
h
203.974 40.639999 m
201.214 40.639999 198.494 39 198.494 35.759998 c
198.494 33.599998 199.774 32.439999 202.65401 31.519999 c
208.494 29.639999 l
209.694 29.24 210.054 29.199999 210.054 28.199999 c
210.054 26.599998 l
210.054 24.119999 208.814 23.839998 207.254 23.839998 c
205.134 23.839998 202.614 24.399998 201.134 24.559998 c
200.774 24.599998 200.534 24.399998 200.494 24.119997 c
200.414 23.399998 l
200.29401 22.359997 206.37401 20.679998 209.414 20.679998 c
214.054 20.679998 214.37401 24.359999 214.37401 27.199999 c
214.37401 35.639999 l
214.37401 39 217.25401 37.639999 217.81401 38 c
218.01401 38.119999 218.09401 38.400002 218.09401 38.560001 c
218.09401 39.400002 214.69402 40.639999 213.01401 40.639999 c
211.73401 40.639999 210.93401 39.919998 209.97401 37.880001 c
206.17401 40.200001 205.33401 40.639999 203.97401 40.639999 c
203.974 40.639999 l
h
205.894 37.68 m
207.93399 37.68 210.09399 36.240002 210.09399 34.200001 c
210.09399 31.080002 l
209.85399 31.240002 209.894 31.280003 209.13399 31.520002 c
205.09399 32.880001 l
203.814 33.32 203.174 34 203.174 35.200001 c
203.174 36.720001 204.21399 37.68 205.894 37.68 c
h
218.5 40 m
218.17999 40 217.89999 38.84 218.22 38.799999 c
219.42 38.639999 220.98 38.079998 220.98 35.759998 c
220.98 26.159998 l
220.98 24.239998 219.94 23.799997 218.25999 23.599998 c
217.93999 23.559998 218.09999 22.519999 218.42 22.439999 c
224.74001 20.679998 l
225.22 20.559998 225.42 20.879999 225.42 21.279999 c
225.42 22.4 225.74001 22.799999 226.38 22.559999 c
228.34001 21.84 230.22 20.68 232.62001 20.68 c
236.54001 20.68 237.90001 23.68 237.90001 26.280001 c
237.90001 35.760002 l
237.90001 38.080002 239.46001 38.640003 240.66 38.800003 c
240.98001 38.840004 240.7 40.000004 240.42 40.000004 c
231.5 40.000004 l
231.22 40.000004 231.02 38.840004 231.25999 38.800003 c
232.78 38.560001 233.62 37.880005 233.62 35.760002 c
233.62 28.080002 l
233.62 24.720001 231.98 23.960003 229.42 23.960003 c
227.7 23.960003 225.25999 24.440002 225.25999 25.480003 c
225.25999 35.760002 l
225.25999 37.880001 226.34 38.600002 227.81999 38.800003 c
228.09999 38.840004 227.85999 40.000004 227.53999 40.000004 c
218.5 40.000004 l
218.5 40 l
h
251.70599 40.639999 m
246.146 40.639999 241.98599 36.639999 241.98599 30.84 c
241.98599 25.200001 245.98599 20.68 251.866 20.68 c
257.42599 20.68 261.586 24.68 261.586 30.48 c
261.586 36.119999 257.62601 40.639999 251.70599 40.639999 c
h
252.866 38.240002 m
254.826 38.240002 257.22598 37.040001 257.22598 32.440002 c
257.22598 27.200003 254.38599 23.080002 250.66599 23.080002 c
248.74599 23.080002 246.34598 24.280003 246.34598 28.840002 c
246.34598 34.120003 249.18597 38.240002 252.86598 38.240002 c
252.866 38.240002 l
h
283.272 21.4 m
283.832 21.4 283.832 22.719999 283.35199 22.84 c
282.19199 23.16 281.15198 24.280001 279.87198 27.120001 c
275.91199 36.16 l
275.07199 38.080002 274.79199 39.080002 274.51199 40.080002 c
272.23199 40.480003 l
266.43201 27.160004 l
265.15201 24.160004 264.07202 23.160004 262.91202 22.840004 c
262.43201 22.720003 262.43201 21.400003 262.95203 21.400003 c
271.07202 21.400003 l
271.67203 21.400003 271.67203 22.560003 271.15201 22.840004 c
270.19202 23.360004 269.79202 24.360004 270.992 27.160004 c
274.23199 34.720005 l
277.47198 27.120005 l
278.71198 24.280005 278.47198 23.040005 276.672 22.840004 c
276.23199 22.800003 276.23199 21.400003 276.71201 21.400003 c
283.272 21.400003 l
283.272 21.4 l
h
288.87799 16.92 m
287.99799 16.92 285.83798 15.04 285.83798 13.88 c
285.83798 12.72 287.99799 10.84 288.87799 10.84 c
289.758 10.84 291.918 12.72 291.918 13.88 c
291.918 15.04 289.758 16.92 288.87799 16.92 c
h
284.51801 40 m
284.198 40 283.918 38.84 284.23801 38.799999 c
285.478 38.639999 287.03799 38.079998 287.03799 35.759998 c
287.03799 26.919998 l
287.03799 24.479998 286.39798 23.879997 284.31799 23.599998 c
283.99799 23.559998 284.11798 22.519999 284.39798 22.439999 c
291.47797 20.759998 l
291.87796 20.679998 292.07797 20.959999 291.95798 21.479998 c
291.67798 22.759998 291.31796 25.119997 291.31796 27.719997 c
291.31796 35.759998 l
291.31796 38.079998 292.87796 38.639999 294.11795 38.799999 c
294.39795 38.84 294.15796 40 293.83795 40 c
284.51794 40 l
284.51801 40 l
h
301.12399 16.719999 m
304.76401 11.439999 l
305.48401 10.399999 308.84399 13.479999 307.884 14.199999 c
302.64401 18.16 l
302.12402 18.559999 300.724 17.280001 301.12402 16.719999 c
301.12399 16.719999 l
h
306.12399 40.639999 m
301.76401 40.639999 295.40399 38.040001 295.40399 31.119999 c
295.40399 26.48 298.32401 20.68 306.12399 20.68 c
308.52399 20.68 311.68399 21.440001 311.36398 22.639999 c
311.004 24.039999 l
310.08398 27.679998 308.164 23.32 304.04401 23.32 c
301.12399 23.32 299.724 25.68 299.724 28.879999 c
299.724 34.52 304.444 37.559998 307.32401 37.559998 c
307.724 37.559998 309.004 37.319996 310.884 36.879997 c
311.24399 36.799995 311.564 37.879997 311.32401 37.999996 c
309.76401 38.839996 306.884 40.639996 306.12399 40.639996 c
306.12399 40.639999 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
